<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AT_LEAST_ONE_FILE_MISSING" xml:space="preserve">
    <value>At least on of required files is missing</value>
  </data>
  <data name="DATABASE_INITIALIZED" xml:space="preserve">
    <value>Database has been initialized.</value>
  </data>
  <data name="DATABASE_NOT_UPTODATE" xml:space="preserve">
    <value>Database may not be up to date. Please consider updating your database.</value>
  </data>
  <data name="DONE" xml:space="preserve">
    <value>Parsing done!</value>
  </data>
  <data name="DROP_PARSED" xml:space="preserve">
    <value>{0} drop items parsed</value>
  </data>
  <data name="ENTER_PATH" xml:space="preserve">
    <value>Please enter the directory of files to parse</value>
  </data>
  <data name="ITEMS_PARSED" xml:space="preserve">
    <value>{0} items parsed</value>
  </data>
  <data name="MAPS_PARSED" xml:space="preserve">
    <value>{0} maps parsed</value>
  </data>
  <data name="MAPTYPEMAPS_PARSED" xml:space="preserve">
    <value>MapTypeMaps parsed</value>
  </data>
  <data name="MAPTYPES_PARSED" xml:space="preserve">
    <value>MapTypes parsed</value>
  </data>
  <data name="MONSTERS_PARSED" xml:space="preserve">
    <value>{0} monsters parsed</value>
  </data>
  <data name="NEED_TREE" xml:space="preserve">
    <value>You need a directory tree like this :</value>
  </data>
  <data name="NO_ITEM" xml:space="preserve">
    <value>This item id is not valid!</value>
  </data>
  <data name="NPCMONSTERS_PARSED" xml:space="preserve">
    <value>{0} npc-monsters parsed</value>
  </data>
  <data name="NPCS_PARSED" xml:space="preserve">
    <value>{0} npcs parsed</value>
  </data>
  <data name="PARSE_ACCOUNTS" xml:space="preserve">
    <value>Do you want to parse Accounts?</value>
  </data>
  <data name="PARSE_ALL" xml:space="preserve">
    <value>Do you want to parse ALL?</value>
  </data>
  <data name="PARSE_DROP" xml:space="preserve">
    <value>Do you want to parse Drop? !for MapType dependant drop use MapTypes!</value>
  </data>
  <data name="PARSE_ITEMS" xml:space="preserve">
    <value>Do you want to parse Items?</value>
  </data>
  <data name="PARSE_MAPNPCS" xml:space="preserve">
    <value>Do you want to parse MapNpcs?</value>
  </data>
  <data name="PARSE_MAPS" xml:space="preserve">
    <value>Do you want to parse Maps?</value>
  </data>
  <data name="PARSE_MAPTYPES" xml:space="preserve">
    <value>Do you want to parse MapTypes? we suggest using with MapTypeMaps</value>
  </data>
  <data name="PARSE_MONSTERS" xml:space="preserve">
    <value>Do you want to parse NpcMonsters?</value>
  </data>
  <data name="PARSE_NPCMONSTERS" xml:space="preserve">
    <value>Do you want to parse Npcs?</value>
  </data>
  <data name="PARSE_PORTALS" xml:space="preserve">
    <value>Do you want to parse Portals?</value>
  </data>
  <data name="PARSE_RECIPES" xml:space="preserve">
    <value>Do you want to parse Recipes?</value>
  </data>
  <data name="PARSE_SHOPITEMS" xml:space="preserve">
    <value>Do you want to parse Shopitems?</value>
  </data>
  <data name="PARSE_SHOPS" xml:space="preserve">
    <value>Do you want to parse Shops?</value>
  </data>
  <data name="PARSE_SHOPSKILLS" xml:space="preserve">
    <value>Do you want to parse Shopskills?</value>
  </data>
  <data name="PARSE_SKILLS" xml:space="preserve">
    <value>Do you want to parse Skills?</value>
  </data>
  <data name="PARSE_TELEPORTERS" xml:space="preserve">
    <value>Do you want to parse Teleporters?</value>
  </data>
  <data name="PORTALS_PARSED" xml:space="preserve">
    <value>{0} portals parsed</value>
  </data>
  <data name="RECIPES_PARSED" xml:space="preserve">
    <value>{0} recipes parsed</value>
  </data>
  <data name="SHOPITEMS_PARSED" xml:space="preserve">
    <value>{0} shopitems parsed</value>
  </data>
  <data name="SHOPSKILLS_PARSED" xml:space="preserve">
    <value>{0} shopskills parsed</value>
  </data>
  <data name="SHOPS_PARSED" xml:space="preserve">
    <value>{0} shops parsed</value>
  </data>
  <data name="SKILLS_PARSED" xml:space="preserve">
    <value>{0} skills parsed</value>
  </data>
  <data name="TELEPORTERS_PARSED" xml:space="preserve">
    <value>{0} teleporters parsed</value>
  </data>
  <data name="PARSE_NPCMONSTERDATA" xml:space="preserve">
    <value>Do you want to parse NpcMonsterData?</value>
  </data>
  <data name="RESPAWNTYPE_PARSED" xml:space="preserve">
    <value>RespawnTypes parsed</value>
  </data>
  <data name="PARSE_CARDS" xml:space="preserve">
    <value>Do you want to parse Cards?</value>
  </data>
  <data name="CARDS_PARSED" xml:space="preserve">
    <value>{0} cards parsed</value>
  </data>
  <data name="TIMESPACES_PARSED" xml:space="preserve">
    <value>{0} timespaces parsed</value>
  </data>
</root>